#!/bin/zsh

###########################
## Defining Chess Pieces ##
###########################

#shell doesnt have classes,
#so we need to use builtins.

#Format: <x><y><type><team>
#piece types:
#p - pawn
#r - rook
#n - knight
#b - bishop
#q - queen
#k - king

#piece teams:
#w - white
#b - black

initBoard=(
    11rw 21nw 31bw 41qw 51kw 61bw 71nw 81rw 
    12pw 22pw 32pw 42pw 52pw 62pw 72pw 82pw
    17pb 27pb 37pb 47pb 57pb 67pb 77pb 87pb
    18rb 28nb 38bb 48qb 58kb 68bb 78nb 88rb 
)

##############################
## End of piece definitions ##
##############################

#############
## Parsing ##
#############

#Functions do not have contingencies for incorrect args

function getPiecePos {
    local piece=$1
    echo ${piece:0:2}
}
function getPieceId {
    local piece=$1
    echo ${piece:2:2}
}
function getPieceType {
    local piece=$1
    echo ${piece:2:1}
}
function getPieceTeam {
    local piece=$1
    echo ${piece:3:1}
}
function oppositeTeam {
    local team=$1
    case $team in
      "w") echo "b" ;;
      "b") echo "w" ;;
      *) echo $team ;;
    esac
}

function searchPos {
    local pos=$1
    shift
    local board=("$@")
    for piece in $board
        if [[ $(getPiecePos $piece) == $pos ]]; then
            echo $piece
            return
        fi
    echo "empty"
}

function showPiece {
    local piece=$1
    case $(getPieceId $piece) in
      "pw")
          echo ♟
          ;;
      "rw")
          echo ♜
          ;;
      "nw")
          echo ♞
          ;;
      "bw")
          echo ♝
          ;;
      "qw")
          echo ♛
          ;;
      "kw")
          echo ♚
          ;;
      "pb")
          echo ♙
          ;;
      "rb")
          echo ♖
          ;;
      "nb")
          echo ♘
          ;;
      "bb")
          echo ♗
          ;;
      "qb")
          echo ♕
          ;;
      "kb")
          echo ♔
          ;;
      *)
          echo .
          ;;
    esac
}
function showBoard {
    local board=("$@")

    for y in {8..1}; do
        printf "$y "
        for x in {1..8}; do
            piece=$(searchPos "$x$y" $board)
            printf "%s " $(showPiece $piece)
        done
        echo
    done
    echo "  1 2 3 4 5 6 7 8"
}

#################
## End parsing ##
#################

###########
## Moves ##
###########

moves=()

function inBounds {
    local pos=$1
    (( pos >= 1 && pos <= 8 ))
}
function isEmpty {
    local pos=$1
    shift
    local board=("$@")
    [[ $(searchPos $pos $board) == "empty" ]]
}
function p2m {
    piece=$1
    y=${piece:1:1}
    case $(getPieceTeam $piece) in
      "w") (( $y == "2" )) ;;
      "b") (( $y == "7" )) ;;
    esac
}

#Does not include castling or en passant
function possibleMoves {
    moves=()

    local piece=$1
    local type=$(getPieceType $piece)
    local team=$(getPieceTeam $piece)

    local pos=$(getPiecePos $piece)
    local x=${pos:0:1}
    local y=${pos:1:1}

    shift
    local board=("$@")
#TODO: knight,king
    case $type in
      "p")
        #pawn moves
        case $team in
          "w")
            taking=()
            if [[ $(getPieceTeam $(searchPos "$((x+1))$((y+1))" $board)) == $(oppositeTeam $team) ]]; then
                taking+=("$((x+1))$((y+1))")
            fi
            if [[ $(getPieceTeam $(searchPos "$((x-1))$((y+1))" $board)) == $(oppositeTeam $team) ]]; then
                taking+=("$((x-1))$((y+1))")
            fi
            moves=("${taking[@]}")
            changey=$((y+1))
            if inBounds $changey && isEmpty "$x$changey" $board; then
              moves+=("$x$changey")
            fi
            changey=$((y+2))
            if inBounds $changey && isEmpty "$x$changey" $board && p2m $piece; then
              moves+=("$x$changey")
            fi
            ;;
          "b")
            taking=()
            if [[ $(getPieceTeam $(searchPos "$((x-1))$((y-1))" $board)) == $(oppositeTeam $team) ]]; then
                taking+=("$((x-1))$((y-1))")
            fi
            if [[ $(getPieceTeam $(searchPos "$((x+1))$((y-1))" $board)) == $(oppositeTeam $team) ]]; then
                taking+=("$((x+1))$((y-1))")
            fi
            moves=("${taking[@]}")
            changey=$((y-1))
            if inBounds $changey && isEmpty "$x$changey" $board; then
              moves+=("$x$changey")
            fi
            changey=$((y-2))
            if inBounds $changey && isEmpty "$x$changey" $board && p2m $piece; then
              moves+=("$x$changey")
            fi
            ;;
          *)
            echo "ERROR: unknown team"
            ;;
        esac
        ;;
      "r")
        #rook moves
        local directions=("1 0" "-1 0" "0 1" "0 -1")

        for dir in "${directions[@]}"; do
          dx=${dir% *}
          dy=${dir#* }
          cx=$x
          cy=$y

          while true; do
            cx=$((cx + dx))
            cy=$((cy + dy))

            if ! inBounds $cx || ! inBounds $cy; then
              break
            fi

            pos="$cx$cy"
            target=$(searchPos "$pos" "${board[@]}")
            if [[ $target == "empty" ]]; then
              moves+=("$pos")
            else
              if [[ $(getPieceTeam "$target") != "$team" ]]; then
                moves+=("$pos")  # capture enemy
              fi
              break  # stop after any piece
            fi
          done
        done
        ;;
      "n")
        #knight moves
        changex=$((x+2))
        if inBounds $changex; then
          changey=$((y+1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
          changey=$((y-1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
        fi
        changex=$((x-2))
        if inBounds $changex; then
          changey=$((y+1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
          changey=$((y-1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
        fi
        changex=$((x+1))
        if inBounds $changex; then
          changey=$((y+2))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
          changey=$((y-2))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
        fi
        changex=$((x-1))
        if inBounds $changex; then
          changey=$((y+2))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
          changey=$((y-2))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
        fi
        ;;
      "b")
        #bishop moves
        local directions=("1 1" "-1 -1" "1 -1" "-1 1")
        for dir in "${directions[@]}"; do
          dx=${dir% *}
          dy=${dir#* }
          cx=$x
          cy=$y

          while true; do
            cx=$((cx + dx))
            cy=$((cy + dy))

            if ! inBounds $cx || ! inBounds $cy; then
              break
            fi

            pos="$cx$cy"
            target=$(searchPos "$pos" "${board[@]}")
            if [[ $target == "empty" ]]; then
              moves+=("$pos")
            else
              if [[ $(getPieceTeam "$target") != "$team" ]]; then
                moves+=("$pos")  # capture enemy
              fi
              break  # stop after any piece
            fi
          done
        done
        ;;
      "q")
        # Queen = rook + bishop movement
        local directions=("1 0" "-1 0" "0 1" "0 -1" "1 1" "-1 -1" "1 -1" "-1 1")
        for dir in "${directions[@]}"; do
          dx=${dir% *}
          dy=${dir#* }
          cx=$x
          cy=$y

          while true; do
            cx=$((cx + dx))
            cy=$((cy + dy))

            if ! inBounds $cx || ! inBounds $cy; then
              break
            fi

            pos="$cx$cy"
            target=$(searchPos "$pos" "${board[@]}")
            if [[ $target == "empty" ]]; then
              moves+=("$pos")
            else
              if [[ $(getPieceTeam "$target") != "$team" ]]; then
                moves+=("$pos")  # capture enemy
              fi
              break  # stop after any piece
            fi
          done
        done
        ;;
      "k")
        #king moves
        changex=$((x+1))
        if inBounds $changex; then
          moves+=("$changex$y")
          changey=$((y+1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
          changey=$((y-1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
        fi
        changex=$((x-1))
        if inBounds $changex; then
          moves+=("$changex$y")
          changey=$((y+1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
          changey=$((y-1))
          if inBounds $changey; then
            moves+=("$changex$changey")
          fi
        fi
        changey=$((y+1))
        if inBounds $changey; then
          moves+=("$x$changey")
        fi
        changey=$((y-1))
        if inBounds $changey; then
          moves+=("$x$changey")
        fi
        ;;
      *) 
        echo "ERROR: not a piece"
        ;;
    esac
}

possibleMoves "16pb" $initBoard
showBoard $initBoard
echo "Moves: ${moves[@]}"

###############
## End Moves ##
###############
